package com.mycompany.simplecalculator;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class SimpleCalculator {

    private JFrame frame;
    private JTextField textField;
    private double num1 = 0, num2 = 0, result = 0, memory = 0;
    private String operator = "", currentInput = "";

    public SimpleCalculator() {
        // Frame setup
        frame = new JFrame("Enhanced Simple Calculator");
        frame.setSize(400, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());

        // Display field at the top
        textField = new JTextField();
        textField.setFont(new Font("Arial", Font.PLAIN, 30));
        frame.add(textField, BorderLayout.NORTH);

        // Panel for buttons
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(5, 4)); // 5 rows and 4 columns (including additional row for memory)
        frame.add(panel, BorderLayout.CENTER);

        // Buttons for digits and operations
        String[] buttonText = {
            "7", "8", "9", "/",
            "4", "5", "6", "*",
            "1", "2", "3", "-",
            "C", "0", "=", "+",
            "CE", "←", "%", "M+",
            "MR", "MC"
        };

        // Adding buttons to the panel
        for (String text : buttonText) {
            JButton button = new JButton(text);
            button.setFont(new Font("Arial", Font.PLAIN, 20));
            button.addActionListener(new ButtonClickListener());
            panel.add(button);
        }

        // Show the frame
        frame.setVisible(true);
    }

    private class ButtonClickListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String command = e.getActionCommand();

            // Number button pressed
            if (command.matches("[0-9]")) {
                currentInput += command;
                textField.setText(currentInput);
            }

            // Clear Entry (CE) clears the current input
            else if (command.equals("CE")) {
                currentInput = "";
                textField.setText(currentInput);
            }

            // Backspace (←) removes the last character
            else if (command.equals("←")) {
                if (currentInput.length() > 0) {
                    currentInput = currentInput.substring(0, currentInput.length() - 1);
                    textField.setText(currentInput);
                }
            }

            // Clear button (C) resets everything
            else if (command.equals("C")) {
                num1 = num2 = result = 0;
                operator = "";
                currentInput = "";
                textField.setText(currentInput);
            }

            // Percentage calculation
            else if (command.equals("%")) {
                if (!currentInput.isEmpty()) {
                    double temp = Double.parseDouble(currentInput);
                    result = temp / 100;
                    textField.setText(String.valueOf(result));
                    currentInput = String.valueOf(result);
                }
            }

            // Memory Store (M+), Memory Recall (MR), and Memory Clear (MC)
            else if (command.equals("M+")) {
                memory = Double.parseDouble(currentInput);
                currentInput = "";
                textField.setText("Memory Saved");
            } else if (command.equals("MR")) {
                currentInput = String.valueOf(memory);
                textField.setText(currentInput);
            } else if (command.equals("MC")) {
                memory = 0;
                textField.setText("Memory Cleared");
                currentInput = "";
            }

            // Equals button (=) to calculate the result
            else if (command.equals("=")) {
                if (!currentInput.isEmpty()) {
                    num2 = Double.parseDouble(currentInput);
                    switch (operator) {
                        case "+":
                            result = num1 + num2;
                            break;
                        case "-":
                            result = num1 - num2;
                            break;
                        case "*":
                            result = num1 * num2;
                            break;
                        case "/":
                            if (num2 != 0) {
                                result = num1 / num2;
                            } else {
                                result = 0;
                                JOptionPane.showMessageDialog(frame, "Error: Division by Zero", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                            break;
                    }
                    textField.setText(String.valueOf(result));
                    currentInput = String.valueOf(result);
                    operator = "";
                }
            }

            // Operator buttons (+, -, *, /)
            else {
                if (!currentInput.isEmpty()) {
                    num1 = Double.parseDouble(currentInput);
                    currentInput = "";
                    operator = command;
                    textField.setText("");
                }
            }
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new SimpleCalculator());
    }
}

